// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "../node_modules/rescript/lib/es6/belt_Int.js";
import * as Belt_Result from "../node_modules/rescript/lib/es6/belt_Result.js";

function validateName(name) {
  if (name.length < 1) {
    return {
            TAG: /* Error */1,
            _0: "name cannot be less than 1 character"
          };
  } else if (name.split("").every(function (letter) {
          return letter === "";
        })) {
    return {
            TAG: /* Error */1,
            _0: "name cannot be a series of blanks"
          };
  } else {
    return {
            TAG: /* Ok */0,
            _0: name
          };
  }
}

function isOkPhoneCharacter(character) {
  if (character === ")" || character === "(" || character === "-") {
    return true;
  } else {
    return Belt_Int.fromString(character) !== undefined;
  }
}

function validatePhone(phone) {
  if (phone.length < 9) {
    return {
            TAG: /* Error */1,
            _0: "phone cannot be less than 9 characters"
          };
  } else if (phone.trim().split("").every(isOkPhoneCharacter)) {
    return {
            TAG: /* Ok */0,
            _0: phone
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: "phone can only be spaces, ), (, -, and numbers"
          };
  }
}

function validateAge(age) {
  if (age > -1) {
    return {
            TAG: /* Ok */0,
            _0: age
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: "age needs to be 0 or greater"
          };
  }
}

function getPerson(team, name, age, phone) {
  return Belt_Result.flatMap(Belt_Result.flatMap(Belt_Result.flatMap(validateName(name), (function (param) {
                        return validatePhone(phone);
                      })), (function (param) {
                    return validateAge(age);
                  })), (function (param) {
                return {
                        TAG: /* Ok */0,
                        _0: {
                          team: team,
                          name: name,
                          age: age,
                          phone: phone
                        }
                      };
              }));
}

if ((process.argv[1].split('/')[process.argv[1].split('/').length - 1] === import.meta.url.split('/')[import.meta.url.split('/').length - 1])) {
  var reason = getPerson(/* Red */1, "804-555-1234", 42, "Jesse");
  if (reason.TAG === /* Ok */0) {
    console.log("person:", reason._0);
  } else {
    console.log("person creation failed:", reason._0);
  }
}

export {
  validateName ,
  isOkPhoneCharacter ,
  validatePhone ,
  validateAge ,
  getPerson ,
  
}
/*  Not a pure module */
